(function() {var type_impls = {
"pyo3":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPyPointer-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1726-1732\">source</a><a href=\"#impl-AsPyPointer-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"pyo3/conversion/trait.AsPyPointer.html\" title=\"trait pyo3::conversion::AsPyPointer\">AsPyPointer</a> for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1729-1731\">source</a><a href=\"#method.as_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.AsPyPointer.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Gets the underlying FFI pointer, returns a borrowed pointer.</p>\n</div></details></div></details>","AsPyPointer","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1804-1811\">source</a><a href=\"#impl-Clone-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>If the GIL is held this increments <code>self</code>’s reference count.\nOtherwise this registers the <a href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\"><code>Py</code></a><code>&lt;T&gt;</code> instance to have its reference count\nincremented the next time PyO3 acquires the GIL.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1805-1810\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.78.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1866-1870\">source</a><a href=\"#impl-Debug-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1867-1869\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1856-1864\">source</a><a href=\"#impl-Display-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/type_object/trait.PyTypeInfo.html\" title=\"trait pyo3::type_object::PyTypeInfo\">PyTypeInfo</a>,\n    T::<a class=\"associatedtype\" href=\"pyo3/type_object/trait.HasPyGilRef.html#associatedtype.AsRefTarget\" title=\"type pyo3::type_object::HasPyGilRef::AsRefTarget\">AsRefTarget</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1861-1863\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1814-1820\">source</a><a href=\"#impl-Drop-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>Dropping a <code>Py</code> instance decrements the reference count on the object by 1.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1815-1819\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.78.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1849-1854\">source</a><a href=\"#impl-Error-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"pyo3/type_object/trait.PyTypeInfo.html\" title=\"trait pyo3::type_object::PyTypeInfo\">PyTypeInfo</a>,\n    T::<a class=\"associatedtype\" href=\"pyo3/type_object/trait.HasPyGilRef.html#associatedtype.AsRefTarget\" title=\"type pyo3::type_object::HasPyGilRef::AsRefTarget\">AsRefTarget</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"docblock\"><p><code>Py&lt;T&gt;</code> can be used as an error when T is an Error.</p>\n<p>However for GIL lifetime reasons, cause() cannot be implemented for <code>Py&lt;T&gt;</code>.\nUse .as_ref() to get the GIL-scoped error if you need to inspect the cause.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.78.0/src/core/error.rs.html#84\">source</a></span><a href=\"#method.source\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class='docblock'>The lower-level source of this error, if any. <a href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.78.0/src/core/error.rs.html#110\">source</a></span><a href=\"#method.description\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.78.0/src/core/error.rs.html#120\">source</a></span><a href=\"#method.cause\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.78.0/src/core/error.rs.html#184\">source</a><a href=\"#method.provide\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/error/struct.Request.html\" title=\"struct core::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type based access to context intended for error reports. <a href=\"https://doc.rust-lang.org/1.78.0/core/error/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26PyCell%3CT%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1774-1781\">source</a><a href=\"#impl-From%3C%26PyCell%3CT%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"pyo3/pycell/struct.PyCell.html\" title=\"struct pyo3::pycell::PyCell\">PyCell</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1778-1780\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cell: &amp;<a class=\"struct\" href=\"pyo3/pycell/struct.PyCell.html\" title=\"struct pyo3::pycell::PyCell\">PyCell</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&PyCell<T>>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBound%3C'_,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1765-1770\">source</a><a href=\"#impl-From%3CBound%3C'_,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Bound.html\" title=\"struct pyo3::prelude::Bound\">Bound</a>&lt;'_, T&gt;&gt; for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1767-1769\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"pyo3/prelude/struct.Bound.html\" title=\"struct pyo3::prelude::Bound\">Bound</a>&lt;'_, T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Bound<'_, T>>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPyRef%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1783-1790\">source</a><a href=\"#impl-From%3CPyRef%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\">PyRef</a>&lt;'a, T&gt;&gt; for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1787-1789\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pyref: <a class=\"struct\" href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\">PyRef</a>&lt;'a, T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PyRef<'a, T>>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPyRefMut%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1792-1799\">source</a><a href=\"#impl-From%3CPyRefMut%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\">PyRefMut</a>&lt;'a, T&gt;&gt; for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>&lt;Frozen = False&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1796-1798\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pyref: <a class=\"struct\" href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\">PyRefMut</a>&lt;'a, T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PyRefMut<'a, T>>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromPyObject%3C'_%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1822-1830\">source</a><a href=\"#impl-FromPyObject%3C'_%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"pyo3/conversion/trait.FromPyObject.html\" title=\"trait pyo3::conversion::FromPyObject\">FromPyObject</a>&lt;'_&gt; for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/type_object/trait.PyTypeCheck.html\" title=\"trait pyo3::type_object::PyTypeCheck\">PyTypeCheck</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1827-1829\">source</a><a href=\"#method.extract_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.FromPyObject.html#method.extract_bound\" class=\"fn\">extract_bound</a>(ob: &amp;<a class=\"struct\" href=\"pyo3/prelude/struct.Bound.html\" title=\"struct pyo3::prelude::Bound\">Bound</a>&lt;'_, <a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>&gt;) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Extracts <code>Self</code> from the source <code>PyObject</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/conversion.rs.html#218-220\">source</a><a href=\"#method.extract\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.FromPyObject.html#method.extract\" class=\"fn\">extract</a>(ob: &amp;'py <a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Extracts <code>Self</code> from the source GIL Ref <code>obj</code>. <a href=\"pyo3/conversion/trait.FromPyObject.html#method.extract\">Read more</a></div></details></div></details>","FromPyObject<'_>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoPy%3CPy%3CPyAny%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1686-1693\">source</a><a href=\"#impl-IntoPy%3CPy%3CPyAny%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>&gt;&gt; for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_py\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1690-1692\">source</a><a href=\"#method.into_py\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.IntoPy.html#tymethod.into_py\" class=\"fn\">into_py</a>(self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>Py</code> instance to <code>PyObject</code>.\nConsumes <code>self</code> without calling <code>Py_DECREF()</code>.</p>\n</div></details></div></details>","IntoPy<Py<PyAny>>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1059-1098\">source</a><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1069-1071\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Returns the raw FFI pointer represented by self.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Callers are responsible for ensuring that the pointer does not outlive self.</p>\n<p>The reference is borrowed; callers should not decrease the reference count\nwhen they are finished with the pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1080-1082\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.into_ptr\" class=\"fn\">into_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Returns an owned raw FFI pointer represented by self.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The reference is owned; when finished the caller should either transfer ownership\nof the pointer or decrease the reference count (e.g. with <a href=\"pyo3/ffi/fn.Py_DecRef.html\" title=\"fn pyo3::ffi::Py_DecRef\"><code>pyo3::ffi::Py_DecRef</code></a>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_any\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1086-1090\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.as_any\" class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Helper to cast to <code>Py&lt;PyAny&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_any\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1094-1097\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.into_any\" class=\"fn\">into_any</a>(self) -&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Helper to cast to <code>Py&lt;PyAny&gt;</code>, transferring ownership.</p>\n</div></details></div></details>",0,"pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1100-1259\">source</a><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1141-1143\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.borrow\" class=\"fn\">borrow</a>&lt;'py&gt;(&amp;'py self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"struct\" href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\">PyRef</a>&lt;'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the value <code>T</code>.</p>\n<p>This borrow lasts while the returned <a href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\"><code>PyRef</code></a> exists.\nMultiple immutable borrows can be taken out at the same time.</p>\n<p>For frozen classes, the simpler <a href=\"pyo3/prelude/struct.Py.html#method.get\" title=\"method pyo3::prelude::Py::get\"><code>get</code></a> is available.</p>\n<p>Equivalent to <code>self.as_ref(py).borrow()</code> -\nsee <a href=\"pyo3/pycell/struct.PyCell.html#method.borrow\" title=\"method pyo3::pycell::PyCell::borrow\"><code>PyCell::borrow</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Foo {\n    inner: u8,\n}\n\nPython::with_gil(|py| -&gt; PyResult&lt;()&gt; {\n    <span class=\"kw\">let </span>foo: Py&lt;Foo&gt; = Py::new(py, Foo { inner: <span class=\"number\">73 </span>})<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>inner: <span class=\"kw-2\">&amp;</span>u8 = <span class=\"kw-2\">&amp;</span>foo.borrow(py).inner;\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>inner, <span class=\"number\">73</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n})<span class=\"question-mark\">?</span>;</code></pre></div>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow\"><code>try_borrow</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1178-1183\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>&lt;'py&gt;(&amp;'py self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"struct\" href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\">PyRefMut</a>&lt;'py, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>&lt;Frozen = False&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Mutably borrows the value <code>T</code>.</p>\n<p>This borrow lasts while the returned <a href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\"><code>PyRefMut</code></a> exists.</p>\n<p>Equivalent to <code>self.as_ref(py).borrow_mut()</code> -\nsee <a href=\"pyo3/pycell/struct.PyCell.html#method.borrow_mut\" title=\"method pyo3::pycell::PyCell::borrow_mut\"><code>PyCell::borrow_mut</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Foo {\n    inner: u8,\n}\n\nPython::with_gil(|py| -&gt; PyResult&lt;()&gt; {\n    <span class=\"kw\">let </span>foo: Py&lt;Foo&gt; = Py::new(py, Foo { inner: <span class=\"number\">73 </span>})<span class=\"question-mark\">?</span>;\n    foo.borrow_mut(py).inner = <span class=\"number\">35</span>;\n\n    <span class=\"macro\">assert_eq!</span>(foo.borrow(py).inner, <span class=\"number\">35</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n})<span class=\"question-mark\">?</span>;</code></pre></div>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow_mut\"><code>try_borrow_mut</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1196-1198\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.try_borrow\" class=\"fn\">try_borrow</a>&lt;'py&gt;(\n    &amp;'py self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\">PyRef</a>&lt;'py, T&gt;, <a class=\"struct\" href=\"pyo3/pycell/struct.PyBorrowError.html\" title=\"struct pyo3::pycell::PyBorrowError\">PyBorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to immutably borrow the value <code>T</code>, returning an error if the value is currently mutably borrowed.</p>\n<p>The borrow lasts while the returned <a href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\"><code>PyRef</code></a> exists.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow\"><code>borrow</code></a>.</p>\n<p>For frozen classes, the simpler <a href=\"pyo3/prelude/struct.Py.html#method.get\" title=\"method pyo3::prelude::Py::get\"><code>get</code></a> is available.</p>\n<p>Equivalent to <code>self.as_ref(py).borrow_mut()</code> -\nsee <a href=\"pyo3/pycell/struct.PyCell.html#method.try_borrow\" title=\"method pyo3::pycell::PyCell::try_borrow\"><code>PyCell::try_borrow</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1209-1217\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.try_borrow_mut\" class=\"fn\">try_borrow_mut</a>&lt;'py&gt;(\n    &amp;'py self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\">PyRefMut</a>&lt;'py, T&gt;, <a class=\"struct\" href=\"pyo3/pycell/struct.PyBorrowMutError.html\" title=\"struct pyo3::pycell::PyBorrowMutError\">PyBorrowMutError</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>&lt;Frozen = False&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to mutably borrow the value <code>T</code>, returning an error if the value is currently borrowed.</p>\n<p>The borrow lasts while the returned <a href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\"><code>PyRefMut</code></a> exists.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow_mut\"><code>borrow_mut</code></a>.</p>\n<p>Equivalent to <code>self.as_ref(py).try_borrow_mut()</code> -\nsee <a href=\"pyo3/pycell/struct.PyCell.html#method.try_borrow_mut\" title=\"method pyo3::pycell::PyCell::try_borrow_mut\"><code>PyCell::try_borrow_mut</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1243-1249\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.get\" class=\"fn\">get</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>&lt;Frozen = True&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Provide an immutable borrow of the value <code>T</code> without acquiring the GIL.</p>\n<p>This is available if the class is <a href=\"pyo3/attr.pyclass.html\" title=\"attr pyo3::pyclass\"><code>frozen</code></a> and <a href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\"><code>Sync</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicUsize, Ordering};\n\n<span class=\"attr\">#[pyclass(frozen)]\n</span><span class=\"kw\">struct </span>FrozenCounter {\n    value: AtomicUsize,\n}\n\n<span class=\"kw\">let </span>cell  = Python::with_gil(|py| {\n    <span class=\"kw\">let </span>counter = FrozenCounter { value: AtomicUsize::new(<span class=\"number\">0</span>) };\n\n    Py::new(py, counter).unwrap()\n});\n\ncell.get().value.fetch_add(<span class=\"number\">1</span>, Ordering::Relaxed);</code></pre></div>\n</div></details></div></details>",0,"pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1261-1676\">source</a><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1264-1267\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.bind\" class=\"fn\">bind</a>&lt;'py&gt;(&amp;self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; &amp;<a class=\"struct\" href=\"pyo3/prelude/struct.Bound.html\" title=\"struct pyo3::prelude::Bound\">Bound</a>&lt;'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Attaches this <code>Py</code> to the given Python context, allowing access to further Python APIs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1271-1273\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.into_bound\" class=\"fn\">into_bound</a>(self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Bound.html\" title=\"struct pyo3::prelude::Bound\">Bound</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Same as <code>bind</code> but takes ownership of <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_borrowed\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1277-1279\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.bind_borrowed\" class=\"fn\">bind_borrowed</a>&lt;'a, 'py&gt;(&amp;'a self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Borrowed.html\" title=\"struct pyo3::prelude::Borrowed\">Borrowed</a>&lt;'a, 'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Same as <code>bind</code> but produces a <code>Borrowed&lt;T&gt;</code> instead of a <code>Bound&lt;T&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1286-1288\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.is\" class=\"fn\">is</a>&lt;U: <a class=\"trait\" href=\"pyo3/conversion/trait.AsPyPointer.html\" title=\"trait pyo3::conversion::AsPyPointer\">AsPyPointer</a>&gt;(&amp;self, o: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether <code>self</code> and <code>other</code> point to the same object. To compare\nthe equality of two objects (the <code>==</code> operator), use <a href=\"pyo3/types/struct.PyAny.html#method.eq\" title=\"method pyo3::types::PyAny::eq\"><code>eq</code></a>.</p>\n<p>This is equivalent to the Python expression <code>self is other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_refcnt\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1292-1294\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.get_refcnt\" class=\"fn\">get_refcnt</a>(&amp;self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Gets the reference count of the <code>ffi::PyObject</code> pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1319-1321\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.clone_ref\" class=\"fn\">clone_ref</a>(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a clone of <code>self</code>.</p>\n<p>This creates another pointer to the same object, increasing its reference count.</p>\n<p>You should prefer using this method over <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a> if you happen to be holding the GIL already.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>pyo3::types::PyDict;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>first: Py&lt;PyDict&gt; = PyDict::new_bound(py).unbind();\n    <span class=\"kw\">let </span>second = Py::clone_ref(<span class=\"kw-2\">&amp;</span>first, py);\n\n    <span class=\"comment\">// Both point to the same object\n    </span><span class=\"macro\">assert!</span>(first.is(<span class=\"kw-2\">&amp;</span>second));\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1348-1350\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.drop_ref\" class=\"fn\">drop_ref</a>(self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;)</h4></section></summary><div class=\"docblock\"><p>Drops <code>self</code> and immediately decreases its reference count.</p>\n<p>This method is a micro-optimisation over <a href=\"https://doc.rust-lang.org/1.78.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\"><code>Drop</code></a> if you happen to be holding the GIL\nalready.</p>\n<p>Note that if you are using <a href=\"pyo3/prelude/struct.Bound.html\" title=\"struct pyo3::prelude::Bound\"><code>Bound</code></a>, you do not need to use <a href=\"pyo3/prelude/struct.Py.html#method.drop_ref\" title=\"method pyo3::prelude::Py::drop_ref\"><code>Self::drop_ref</code></a> since\n<a href=\"pyo3/prelude/struct.Bound.html\" title=\"struct pyo3::prelude::Bound\"><code>Bound</code></a> guarantees that the GIL is held.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>pyo3::types::PyDict;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>object: Py&lt;PyDict&gt; = PyDict::new_bound(py).unbind();\n\n    <span class=\"comment\">// some usage of object\n\n    </span>object.drop_ref(py);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1355-1357\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the object is considered to be None.</p>\n<p>This is equivalent to the Python expression <code>self is None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ellipsis\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1363-1365\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.is_ellipsis\" class=\"fn\">is_ellipsis</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.20.0: use <code>.is(py.Ellipsis())</code> instead</span></div></span></summary><div class=\"docblock\"><p>Returns whether the object is Ellipsis, e.g. <code>...</code>.</p>\n<p>This is equivalent to the Python expression <code>self is ...</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_true\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1371-1373\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.is_true\" class=\"fn\">is_true</a>(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: use <code>.is_truthy()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Returns whether the object is considered to be true.</p>\n<p>This is equivalent to the Python expression <code>bool(self)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_truthy\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1378-1382\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.is_truthy\" class=\"fn\">is_truthy</a>(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns whether the object is considered to be true.</p>\n<p>This applies truth value testing equivalent to the Python expression <code>bool(self)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1387-1395\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.extract\" class=\"fn\">extract</a>&lt;'a, 'py, D&gt;(&amp;'a self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"pyo3/conversion/trait.FromPyObjectBound.html\" title=\"trait pyo3::conversion::FromPyObjectBound\">FromPyObjectBound</a>&lt;'a, 'py&gt;,\n    'py: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Extracts some type from the Python object.</p>\n<p>This is a wrapper function around <code>FromPyObject::extract()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.getattr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1420-1425\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.getattr\" class=\"fn\">getattr</a>&lt;N&gt;(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;, attr_name: N) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves an attribute value.</p>\n<p>This is equivalent to the Python expression <code>self.attr_name</code>.</p>\n<p>If calling this method becomes performance-critical, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a> macro\ncan be used to intern <code>attr_name</code>, thereby avoiding repeated temporary allocations of\nPython strings.</p>\n<h5 id=\"example-interning-the-attribute-name\"><a class=\"doc-anchor\" href=\"#example-interning-the-attribute-name\">§</a>Example: <code>intern!</code>ing the attribute name</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyfunction]\n</span><span class=\"kw\">fn </span>version(sys: Py&lt;PyModule&gt;, py: Python&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; PyResult&lt;PyObject&gt; {\n    sys.getattr(py, <span class=\"macro\">intern!</span>(py, <span class=\"string\">\"version\"</span>))\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.setattr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1449-1457\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.setattr\" class=\"fn\">setattr</a>&lt;N, V&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    attr_name: N,\n    value: V\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;&gt;,\n    V: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Sets an attribute value.</p>\n<p>This is equivalent to the Python expression <code>self.attr_name = value</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>attr_name</code>.</p>\n<h5 id=\"example-interning-the-attribute-name-1\"><a class=\"doc-anchor\" href=\"#example-interning-the-attribute-name-1\">§</a>Example: <code>intern!</code>ing the attribute name</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyfunction]\n</span><span class=\"kw\">fn </span>set_answer(ob: PyObject, py: Python&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; PyResult&lt;()&gt; {\n    ob.setattr(py, <span class=\"macro\">intern!</span>(py, <span class=\"string\">\"answer\"</span>), <span class=\"number\">42</span>)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1468-1473\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.call\" class=\"fn\">call</a>&lt;A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    args: A,\n    kwargs: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"pyo3/types/struct.PyDict.html\" title=\"struct pyo3::types::PyDict\">PyDict</a>&gt;\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: <code>call</code> will be replaced by <code>call_bound</code> in a future PyO3 version</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"pyo3/prelude/struct.Py.html#method.call_bound\" title=\"method pyo3::prelude::Py::call_bound\"><code>call_bound</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1478-1485\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.call_bound\" class=\"fn\">call_bound</a>(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    args: impl <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;&gt;,\n    kwargs: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"pyo3/prelude/struct.Bound.html\" title=\"struct pyo3::prelude::Bound\">Bound</a>&lt;'_, <a class=\"struct\" href=\"pyo3/types/struct.PyDict.html\" title=\"struct pyo3::types::PyDict\">PyDict</a>&gt;&gt;\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calls the object.</p>\n<p>This is equivalent to the Python expression <code>self(*args, **kwargs)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call1\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1490-1492\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.call1\" class=\"fn\">call1</a>(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    args: impl <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;&gt;\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calls the object with only positional arguments.</p>\n<p>This is equivalent to the Python expression <code>self(*args)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call0\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1497-1499\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.call0\" class=\"fn\">call0</a>(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calls the object without arguments.</p>\n<p>This is equivalent to the Python expression <code>self()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1510-1522\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.call_method\" class=\"fn\">call_method</a>&lt;N, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    name: N,\n    args: A,\n    kwargs: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"pyo3/types/struct.PyDict.html\" title=\"struct pyo3::types::PyDict\">PyDict</a>&gt;\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;&gt;,\n    A: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: <code>call_method</code> will be replaced by <code>call_method_bound</code> in a future PyO3 version</span></div></span></summary><div class=\"docblock\"><p>Deprecated form of <a href=\"pyo3/prelude/struct.Py.html#method.call_method_bound\" title=\"method pyo3::prelude::Py::call_method_bound\"><code>call_method_bound</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1530-1545\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.call_method_bound\" class=\"fn\">call_method_bound</a>&lt;N, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    name: N,\n    args: A,\n    kwargs: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"pyo3/prelude/struct.Bound.html\" title=\"struct pyo3::prelude::Bound\">Bound</a>&lt;'_, <a class=\"struct\" href=\"pyo3/types/struct.PyDict.html\" title=\"struct pyo3::types::PyDict\">PyDict</a>&gt;&gt;\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;&gt;,\n    A: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls a method on the object.</p>\n<p>This is equivalent to the Python expression <code>self.name(*args, **kwargs)</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>name</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method1\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1553-1562\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.call_method1\" class=\"fn\">call_method1</a>&lt;N, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    name: N,\n    args: A\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;&gt;,\n    A: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls a method on the object with only positional arguments.</p>\n<p>This is equivalent to the Python expression <code>self.name(*args)</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>name</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method0\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1570-1575\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.call_method0\" class=\"fn\">call_method0</a>&lt;N&gt;(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;, name: N) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls a method on the object with no arguments.</p>\n<p>This is equivalent to the Python expression <code>self.name()</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>name</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1588-1593\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.from_owned_ptr\" class=\"fn\">from_owned_ptr</a>(py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;, ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>) -&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by taking ownership of the given FFI pointer.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n<p>Callers must own the object referred to by <code>ptr</code>, as this function\nimplicitly takes ownership of that object.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>ptr</code> is null.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr_or_err\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1602-1610\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.from_owned_ptr_or_err\" class=\"fn\">from_owned_ptr_or_err</a>(\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by taking ownership of the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then the current Python exception is fetched as a <a href=\"pyo3/prelude/struct.PyErr.html\" title=\"struct pyo3::prelude::PyErr\"><code>PyErr</code></a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>If non-null, <code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr_or_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1619-1621\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.from_owned_ptr_or_opt\" class=\"fn\">from_owned_ptr_or_opt</a>(\n    _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by taking ownership of the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then <code>None</code> is returned.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>If non-null, <code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1631-1636\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.from_borrowed_ptr\" class=\"fn\">from_borrowed_ptr</a>(py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;, ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>) -&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by creating a new reference from the given FFI pointer.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>ptr</code> is null.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr_or_err\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1645-1650\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.from_borrowed_ptr_or_err\" class=\"fn\">from_borrowed_ptr_or_err</a>(\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by creating a new reference from the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then the current Python exception is fetched as a <code>PyErr</code>.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr_or_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1659-1667\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.from_borrowed_ptr_or_opt\" class=\"fn\">from_borrowed_ptr_or_opt</a>(\n    _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by creating a new reference from the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then <code>None</code> is returned.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details></div></details>",0,"pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#915-940\">source</a><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#937-939\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.new\" class=\"fn\">new</a>(\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"pyo3/pyclass_init/struct.PyClassInitializer.html\" title=\"struct pyo3::pyclass_init::PyClassInitializer\">PyClassInitializer</a>&lt;T&gt;&gt;\n) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyResult.html\" title=\"type pyo3::prelude::PyResult\">PyResult</a>&lt;<a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new instance <code>Py&lt;T&gt;</code> of a <code>#[pyclass]</code> on the Python heap.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Foo {<span class=\"comment\">/* fields omitted */</span>}\n\nPython::with_gil(|py| -&gt; PyResult&lt;Py&lt;Foo&gt;&gt; {\n    <span class=\"kw\">let </span>foo: Py&lt;Foo&gt; = Py::new(py, Foo {})<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(foo)\n})<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#942-1057\">source</a><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/type_object/trait.HasPyGilRef.html\" title=\"trait pyo3::type_object::HasPyGilRef\">HasPyGilRef</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#996-999\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.as_ref\" class=\"fn\">as_ref</a>&lt;'py&gt;(&amp;'py self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; &amp;'py T::<a class=\"associatedtype\" href=\"pyo3/type_object/trait.HasPyGilRef.html#associatedtype.AsRefTarget\" title=\"type pyo3::type_object::HasPyGilRef::AsRefTarget\">AsRefTarget</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: use <code>obj.bind(py)</code> instead of <code>obj.as_ref(py)</code></span></div></span></summary><div class=\"docblock\"><p>Borrows a GIL-bound reference to the contained <code>T</code>.</p>\n<p>By binding to the GIL lifetime, this allows the GIL-bound reference to not require\n<a href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\"><code>Python&lt;'py&gt;</code></a> for any of its methods, which makes calling methods\non it more ergonomic.</p>\n<p>For native types, this reference is <code>&amp;T</code>. For pyclasses, this is <code>&amp;PyCell&lt;T&gt;</code>.</p>\n<p>Note that the lifetime of the returned reference is the shortest of <code>&amp;self</code> and\n<a href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\"><code>Python&lt;'py&gt;</code></a>.\nConsider using <a href=\"pyo3/prelude/struct.Py.html#method.into_ref\" title=\"method pyo3::prelude::Py::into_ref\"><code>Py::into_ref</code></a> instead if this poses a problem.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Get access to <code>&amp;PyList</code> from <code>Py&lt;PyList&gt;</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>Python::with_gil(|py| {\n    <span class=\"kw\">let </span>list: Py&lt;PyList&gt; = PyList::empty_bound(py).into();\n    <span class=\"kw\">let </span>list: <span class=\"kw-2\">&amp;</span>PyList = list.as_ref(py);\n    <span class=\"macro\">assert_eq!</span>(list.len(), <span class=\"number\">0</span>);\n});</code></pre></div>\n<p>Get access to <code>&amp;PyCell&lt;MyClass&gt;</code> from <code>Py&lt;MyClass&gt;</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>MyClass {}\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>my_class: Py&lt;MyClass&gt; = Py::new(py, MyClass {}).unwrap();\n    <span class=\"kw\">let </span>my_class_cell: <span class=\"kw-2\">&amp;</span>PyCell&lt;MyClass&gt; = my_class.as_ref(py);\n    <span class=\"macro\">assert!</span>(my_class_cell.try_borrow().is_ok());\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1051-1056\">source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/prelude/struct.Py.html#tymethod.into_ref\" class=\"fn\">into_ref</a>(self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; &amp;T::<a class=\"associatedtype\" href=\"pyo3/type_object/trait.HasPyGilRef.html#associatedtype.AsRefTarget\" title=\"type pyo3::type_object::HasPyGilRef::AsRefTarget\">AsRefTarget</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.21.0: use <code>obj.into_bound(py)</code> instead of <code>obj.into_ref(py)</code></span></div></span></summary><div class=\"docblock\"><p>Borrows a GIL-bound reference to the contained <code>T</code> independently of the lifetime of <code>T</code>.</p>\n<p>This method is similar to <a href=\"#method.as_ref\"><code>as_ref</code></a> but consumes <code>self</code> and registers the\nPython object reference in PyO3’s object storage. The reference count for the Python\nobject will not be decreased until the GIL lifetime ends.</p>\n<p>You should prefer using <a href=\"#method.as_ref\"><code>as_ref</code></a> if you can as it’ll have less overhead.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p><a href=\"pyo3/prelude/struct.Py.html#method.as_ref\" title=\"method pyo3::prelude::Py::as_ref\"><code>Py::as_ref</code></a>’s lifetime limitation forbids creating a function that references a\nvariable created inside the function.</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>new_py_any&lt;<span class=\"lifetime\">'py</span>&gt;(py: Python&lt;<span class=\"lifetime\">'py</span>&gt;, value: <span class=\"kw\">impl </span>IntoPy&lt;Py&lt;PyAny&gt;&gt;) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'py </span>PyAny {\n    <span class=\"kw\">let </span>obj: Py&lt;PyAny&gt; = value.into_py(py);\n\n    <span class=\"comment\">// The lifetime of the return value of this function is the shortest\n    // of `obj` and `py`. As `obj` is owned by the current function,\n    // Rust won't let the return value escape this function!\n    </span>obj.as_ref(py)\n}</code></pre></div>\n<p>This can be solved by using <a href=\"pyo3/prelude/struct.Py.html#method.into_ref\" title=\"method pyo3::prelude::Py::into_ref\"><code>Py::into_ref</code></a> instead, which does not suffer from this issue.\nNote that the lifetime of the <a href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\"><code>Python&lt;'py&gt;</code></a> token is transferred to\nthe returned reference.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>new_py_any&lt;<span class=\"lifetime\">'py</span>&gt;(py: Python&lt;<span class=\"lifetime\">'py</span>&gt;, value: <span class=\"kw\">impl </span>IntoPy&lt;Py&lt;PyAny&gt;&gt;) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'py </span>PyAny {\n    <span class=\"kw\">let </span>obj: Py&lt;PyAny&gt; = value.into_py(py);\n\n    <span class=\"comment\">// This reference's lifetime is determined by `py`'s lifetime.\n    // Because that originates from outside this function,\n    // this return value is allowed.\n    </span>obj.into_ref(py)\n}</code></pre></div>\n</div></details></div></details>",0,"pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToPyObject-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1678-1684\">source</a><a href=\"#impl-ToPyObject-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"pyo3/conversion/trait.ToPyObject.html\" title=\"trait pyo3::conversion::ToPyObject\">ToPyObject</a> for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_object\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1681-1683\">source</a><a href=\"#method.to_object\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.ToPyObject.html#tymethod.to_object\" class=\"fn\">to_object</a>(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"pyo3/prelude/type.PyObject.html\" title=\"type pyo3::prelude::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>Py</code> instance -&gt; PyObject.</p>\n</div></details></div></details>","ToPyObject","pyo3::instance::PyObject"],["<section id=\"impl-Send-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#912\">source</a><a href=\"#impl-Send-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section>","Send","pyo3::instance::PyObject"],["<section id=\"impl-Sync-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#913\">source</a><a href=\"#impl-Sync-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"pyo3/prelude/struct.Py.html\" title=\"struct pyo3::prelude::Py\">Py</a>&lt;T&gt;</h3></section>","Sync","pyo3::instance::PyObject"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()